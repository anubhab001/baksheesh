/*
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Uncomment to see intermediate results
//#define PRINT_PT_ALL
#define PRINT_CT

#define Rounds 32

// Key
const unsigned char Key[32] = {13, 3, 0, 7, 1, 4, 5, 8, 15, 1, 2, 0, 5, 6, 4, 4, 0, 11, 10, 9, 3, 3, 1, 0, 11, 14, 13, 11, 10, 9, 1, 6};
// Plaintext
const unsigned char Pt[32] = {2, 13, 4, 9, 11, 3, 4, 1, 5, 2, 5, 1, 1, 1, 7, 13, 4, 3, 4, 1, 0, 11, 12, 11, 11, 12, 13, 15, 11, 14, 12, 1};

//Sbox
const unsigned char SBox[16] = {3, 0, 6, 13, 11, 5, 8, 14, 12, 15, 9, 2, 4, 10, 7, 1};
const unsigned char InvSBox[16] = {1, 15, 11, 0, 12, 5, 2, 14, 6, 10, 13, 4, 8, 3, 7, 9};

//bit permutation
const unsigned char PermBits[128] = {0, 33, 66, 99, 96, 1, 34, 67, 64, 97, 2, 35, 32, 65, 98, 3, 4, 37, 70, 103, 100, 5, 38, 71, 68, 101, 6, 39, 36, 69, 102, 7, 8, 41, 74, 107, 104, 9, 42, 75, 72, 105, 10, 43, 40, 73, 106, 11, 12, 45, 78, 111, 108, 13, 46, 79, 76, 109, 14, 47, 44, 77, 110, 15, 16, 49, 82, 115, 112, 17, 50, 83, 80, 113, 18, 51, 48, 81, 114, 19, 20, 53, 86, 119, 116, 21, 54, 87, 84, 117, 22, 55, 52, 85, 118, 23, 24, 57, 90, 123, 120, 25, 58, 91, 88, 121, 26, 59, 56, 89, 122, 27, 28, 61, 94, 127, 124, 29, 62, 95, 92, 125, 30, 63, 60, 93, 126, 31};
const unsigned char PermBitsInv[128] = {0, 5, 10, 15, 16, 21, 26, 31, 32, 37, 42, 47, 48, 53, 58, 63, 64, 69, 74, 79, 80, 85, 90, 95, 96, 101, 106, 111, 112, 117, 122, 127, 12, 1, 6, 11, 28, 17, 22, 27, 44, 33, 38, 43, 60, 49, 54, 59, 76, 65, 70, 75, 92, 81, 86, 91, 108, 97, 102, 107, 124, 113, 118, 123, 8, 13, 2, 7, 24, 29, 18, 23, 40, 45, 34, 39, 56, 61, 50, 55, 72, 77, 66, 71, 88, 93, 82, 87, 104, 109, 98, 103, 120, 125, 114, 119, 4, 9, 14, 3, 20, 25, 30, 19, 36, 41, 46, 35, 52, 57, 62, 51, 68, 73, 78, 67, 84, 89, 94, 83, 100, 105, 110, 99, 116, 121, 126, 115};

// round constants
const unsigned char RC[Rounds] = {0, 1, 2, 4, 9, 18, 5, 11, 22, 12, 25, 19, 7, 15, 31, 30, 28, 24, 17, 3, 6, 13, 27, 23, 14, 29, 26, 21, 10, 20, 8, 16};

// tap positions for round constants
const unsigned const_loc[6] = {6, 28, 69, 80, 119, 126};




void enc128(unsigned char *);
void dec128(unsigned char *);

unsigned char *int2bin(int n, int nbits)
{
    unsigned char *s = malloc(nbits + 1);
    s[nbits] = '\0';

    unsigned int u = *(unsigned int *)&n;

    unsigned int mask = 1 << (nbits - 1);
    for (char i = 0; i < nbits; i++, mask >>= 1)
        s[i] = ((u & mask) != 0) + '0';
    return s;
}

unsigned char *intarray2binarray(unsigned char *n, int len_na, int nbits)
{
    unsigned char *s = malloc((nbits)*len_na + 1);
    s[nbits * len_na] = '\0';

    for (int i = 0; i < len_na; i++)
    {
        unsigned char *t = int2bin(n[i], nbits);
        for (unsigned char j = 0; j < nbits; j++)
        {
            s[i * nbits + j] = t[j] & 1;
        }
    }
    return s;
}

unsigned char binarray2int(unsigned char *bin, int len)
{
    unsigned char dec = 0;
    unsigned char i = len;
    while (i >= 1)
    {
        if ((bin[len - i] == '1') || (bin[len - i] == 1))
            dec = dec * 2 + 1;
        else if ((bin[len - i] == '0') || (bin[len - i] == 0))
            dec *= 2;
        i--;
    }

    return dec;
}

unsigned char *binarray2intarray(unsigned char *bin, unsigned char nbits, unsigned int len_na)
{
    unsigned char *d = malloc((len_na / nbits) + 1);
    d[len_na / nbits] = '\0';

    for (unsigned int i = 0; i < (len_na); i = i + nbits)
    {
        unsigned char *t = malloc(nbits);
        for (unsigned char j = 0; j < nbits; j++)
        {
            t[j] = bin[i + j];
        }
        d[i / nbits] = binarray2int(t, nbits);
    }

    return d;
}

int main(int argc, char *argv[])
{

    unsigned char P[32], K[32];

    for (int i = 0; i < 32; i++)
    {
        P[i] = Pt[i];
        K[i] = Key[i];
    }

#ifdef PRINT_PT_ALL
    for (int i = 0; i < 32; i++)
    {
        printf("%x", P[31 - i]);
    }
    printf("\n");
#endif

#ifdef PRINT_CT
    printf("Key ");
    for (int i = 0; i < 32; i++)
    {
        printf("%x", Key[31 - i]);
    }

    printf("\nPT  ");
    for (int i = 0; i < 32; i++)
    {
        printf("%x", P[31 - i]);
    }
    printf("\n");
#endif

    // Encryption
    enc128(P);

#ifdef PRINT_CT
    printf("\nCT  ");
    for (int i = 0; i < 32; i++)
    {
        printf("%x", P[31 - i]);
    }
    printf("\n");
#endif

    // // Decryption
    dec128(P);

    for (int i = 0; i < 32; i++)
    {
        if (P[i] != Pt[i])
        {
            printf("\nError! (%2d)\n", 31 - i);
        }
    }
}



void enc128(unsigned char *input)
{
    int i, j, r;

    //Initial AddRoundKey
    for (i = 0; i < 32; i++)
    {
        input[i] ^= Key[i];
    }

    unsigned char bits[128], perm_bits[128];
    
    for (r = 0; r < Rounds; r++)
    {
        //SubCells
        for (i = 0; i < 32; i++)
        {
            input[i] = SBox[input[i]];
        }

#ifdef PRINT_PT_ALL
        for (int i = 0; i < 32; i++)
        {
            printf("%x", input[31 - i]);
        }
        printf("\n");
#endif

        //PermBits
        //input to bits
        for (i = 0; i < 32; i++)
        {
            for (j = 0; j < 4; j++)
            {
                bits[4 * i + j] = (input[i] >> j) & 0x1;
            }
        }
        //permute the bits
        for (i = 0; i < 128; i++)
        {
            perm_bits[PermBits[i]] = bits[i];
        }

        //add constant
        perm_bits[const_loc[0]] ^= RC[r] & 0x1;
        perm_bits[const_loc[1]] ^= (RC[r] >> 1) & 0x1;
        perm_bits[const_loc[2]] ^= (RC[r] >> 2) & 0x1;
        perm_bits[const_loc[3]] ^= (RC[r] >> 3) & 0x1;
        perm_bits[const_loc[4]] ^= (RC[r] >> 4) & 0x1;
        perm_bits[const_loc[5]] ^= 1;

        //perm_bits to input
        for (i = 0; i < 32; i++)
        {
            input[i] = 0;
            for (j = 0; j < 4; j++)
            {
                input[i] ^= perm_bits[4 * i + j] << j;
            }
        }

#ifdef PRINT_PT_ALL
        for (int i = 0; i < 32; i++)
        {
            printf("%x", input[31 - i]);
        }
        printf("\n");
#endif

        //AddRoundKey
        for (i = 0; i < 32; i++)
        {
            input[i] ^= Key[i];
        }

#ifdef PRINT_PT_ALL
        for (int i = 0; i < 32; i++)
        {
            printf("%x", input[31 - i]);
        }
        printf("\n");
#endif
    }

    return;
}

void dec128(unsigned char *input)
{
    int i, j, r;

    unsigned char bits[128], perm_bits[128];
    
    for (r = Rounds - 1; r >= 0; r--)
    {

        //AddRoundKey
        for (i = 0; i < 32; i++)
        {
            input[i] ^= Key[i];
        }

#ifdef PRINT_PT_ALL
        for (int i = 0; i < 32; i++)
        {
            printf("%x", input[31 - i]);
        }
        printf("\n");
#endif

        //input to bits
        for (i = 0; i < 32; i++)
        {
            for (j = 0; j < 4; j++)
            {
                bits[4 * i + j] = (input[i] >> j) & 0x1;
            }
        }

        //add constant
        bits[const_loc[0]] ^= RC[r] & 0x1;
        bits[const_loc[1]] ^= (RC[r] >> 1) & 0x1;
        bits[const_loc[2]] ^= (RC[r] >> 2) & 0x1;
        bits[const_loc[3]] ^= (RC[r] >> 3) & 0x1;
        bits[const_loc[4]] ^= (RC[r] >> 4) & 0x1;
        bits[const_loc[5]] ^= 1;

        //permute the bits
        for (i = 0; i < 128; i++)
        {
            perm_bits[PermBitsInv[i]] = bits[i];
        }

        //perm_bits to input
        for (i = 0; i < 32; i++)
        {
            input[i] = 0;
            for (j = 0; j < 4; j++)
            {
                input[i] ^= perm_bits[4 * i + j] << j;
            }
        }

#ifdef PRINT_PT_ALL
        for (int i = 0; i < 32; i++)
        {
            printf("%x", input[31 - i]);
        }
        printf("\n");
#endif

        //SubCellsInverse
        for (i = 0; i < 32; i++)
        {
            input[i] = InvSBox[input[i]];
        }

#ifdef PRINT_PT_ALL
        for (int i = 0; i < 32; i++)
        {
            printf("%x", input[31 - i]);
        }
        printf("\n");
#endif
    }

    //Final AddRoundKey
    for (i = 0; i < 32; i++)
    {
        input[i] ^= Key[i];
    }

    return;
}
